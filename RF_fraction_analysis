


fracAnalysis<- function(dataset.to.mimic, times=10, fractions=10, repeats=10, jitt=., num.of.exp=dim(dataset.to.mimic)[2]){
fractionAnalysis=list()

fractionAnalysis$RFscore<-matrix(nrow=fractions, ncol=repeats, data=NA)
fractionAnalysis$MAXMCC<-matrix(nrow=fractions, ncol=repeats, data=NA)
fractionAnalysis$COR<-matrix(nrow=fractions, ncol=repeats, data=NA)
fractionAnalysis$RATIO.IMP.VS.NIMP<-matrix(nrow=fractions, ncol=repeats, data=NA)
for(i in 1:fractions){
for(j in 1:repeats){
x<-generateCovaryingGroups(dim(dataset.to.mimic)[1], num.of.exp, jitter.amt=jitt, fraction.of.variables=i/fractions)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST, specialVarSubset=x$IMPORTANT.VARS)
fractionAnalysis$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$COR[i,j]<- rfOfIndices[3]
fractionAnalysis$RATIO.IMP.VS.NIMP[i,j]<- rfOfIndices[4]
}
}

fractionAnalysis$JITTER<-jitt
fractionAnalysis$NUMBER.OF.EXPERIMENTS<-num.of.exp

return(fractionAnalysis)
}

 d<-fracAnalysis(dataset.to.mimic=protein.groups[,experiment.ratio.column.indices], num.of.exp=20, repeats=2, frations=2)



finalfractAnalysis2<- list()
ji<-seq(0.01, 2, .05)
for(i in 1:length(ji)){
finalfractAnalysis[[i]]<-fracAnalysis(dataset.to.mimic=protein.groups[,experiment.ratio.column.indices], num.of.exp=20, repeats=3, jitt=ji[i], fractions=10)
save.image()


}


plot.fraction.analysis<-function(fa){
RF.Xfraction.Yjitter<- matrix(nrow= length(ji), ncol=nrow(fa[[1]]$RFscore), data=NA)
COR.Xfraction.Yjitter<- matrix(nrow= length(ji), ncol=nrow(fa[[1]]$RFscore), data=NA)
Ratio.Xfraction.Yjitter<- matrix(nrow= length(ji), ncol=nrow(fa[[1]]$RFscore), data=NA)
MCC.Xfraction.Yjitter<- matrix(nrow= length(ji), ncol=nrow(fa[[1]]$RFscore), data=NA)


noise.magnitude= rep(NA, length(fa))



for(i in 1: length(fa)){
 RF.Xfraction.Yjitter[i,]=apply(fa[[i]]$RFscore, 1, mean)
 MCC.Xfraction.Yjitter[i,]=apply(fa[[i]]$MAXMCC, 1, mean)
 COR.Xfraction.Yjitter[i,]=apply(fa[[i]]$COR, 1, mean)
 Ratio.Xfraction.Yjitter[i,]= apply(fa[[i]]$RATIO.IMP.VS.NIMP, 1, mean)
 noise.magnitude[i]<- fa[[i]]$JITTER
}
return(list(RATIO=Ratio.Xfraction.Yjitter, MCC=MCC.Xfraction.Yjitter, COR=COR.Xfraction.Yjitter, RF= RF.Xfraction.Yjitter))
}
#print(rbind(seq(0, 1, (1/length(fa))*4), noise.magnitude))

#pdf("RF_Xfraction_Yjitter_plot.pdf")

# image(t(RF.Xfraction.Yjitter), yaxt="n", xlab= "Fraction of informative data sets", ylab= "Noise amount", main="Mean random forest score of positive set" )
# #axis(2, at= seq(0, 1, (1/length(fa))*4), labels=noise.magnitude[seq(1, length(noise.magnitude)+1, 4)], las=1 )
# dev.off()
# 
# pdf("MCC_Xfraction_Yjitter_plot.pdf")
# 
# image(t(MCC.Xfraction.Yjitter), yaxt="n", xlab= "Fraction of informative data sets", ylab= "Noise amount", main="Maximum separation quality" )
# #axis(2, at= seq(0, 1, (1/length(fa))*4), labels=noise.magnitude[seq(1, length(noise.magnitude)+1, 4)], las=1 )
# dev.off()
# 
# pdf("COR_Xfraction_Yjitter_plot.pdf")
# 
# image(t(COR.Xfraction.Yjitter), yaxt="n", xlab= "Fraction of informative data sets", ylab= "Noise amount", main=" mean correlation among positive set elements")
# #axis(2, at= seq(0, 1, (1/length(fa))*4), labels=noise.magnitude[seq(1, length(noise.magnitude)+1, 4)], las=1 )
# dev.off()
# 
# 
# pdf("Ratio_Xfraction_Yjitter_plot.pdf")
# 
# image(t(Ratio.Xfraction.Yjitter), yaxt="n", xlab= "Fraction of informative data sets", ylab= "Noise amount", )
# #axis(2, at= seq(0, 1, (1/length(fa))*4), labels=noise.magnitude[seq(1, length(noise.magnitude)+1, 4)], las=1 )
# dev.off()
# image(t(Ratio.Xfraction.Yjitter), xlab= "Fraction of informative data sets", ylab= "Noise amount", )
# 
# #axis(2, at= seq((1/length(fa)*10),1,(1/length(fa)*10))-(1/length(fa))) , labels=noise.magnitude[seq(1, length(noise.magnitude)+1, 4)], las=1 )

}

 kim<-plot.fraction.analysis(finalfractAnalysis)
















fractionAnalysis$jitterp1$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp1$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp1$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.1, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp1$RFscore[i,j], "\n")
fractionAnalysis$jitterp1$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp1$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp1$COR[i,j]<- rfOfIndices[3]

}
}


fractionAnalysis$jitterp2$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp2$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp2$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.2, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp2$RFscore[i,j], "\n")
fractionAnalysis$jitterp2$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp2$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp2$COR[i,j]<- rfOfIndices[3]

}
}

fractionAnalysis$jitterp3$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp3$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp3$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.3, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp3$RFscore[i,j], "\n")
fractionAnalysis$jitterp3$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp3$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp3$COR[i,j]<- rfOfIndices[3]

}
}

fractionAnalysis$jitterp4$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp4$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp4$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.4, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp4$RFscore[i,j], "\n")
fractionAnalysis$jitterp3$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp3$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp3$COR[i,j]<- rfOfIndices[3]

}
}

fractionAnalysis$jitterp5$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp5$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp5$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.5, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
fractionAnalysis$jitterp5$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp5$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp5$COR[i,j]<- rfOfIndices[3]
}
}



fractionAnalysis$jitterp6$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp6$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp6$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.6, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp6$RFscore[i,j], "\n")
fractionAnalysis$jitterp6$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp6$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp6$COR[i,j]<- rfOfIndices[3]

}
}


fractionAnalysis$jitterp7$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp7$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp7$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.7, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp7$RFscore[i,j], "\n")
fractionAnalysis$jitterp7$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp7$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp7$COR[i,j]<- rfOfIndices[3]

}
}


fractionAnalysis$jitterp8$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp8$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp8$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.8, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp8$RFscore[i,j], "\n")
fractionAnalysis$jitterp8$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp8$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp8$COR[i,j]<- rfOfIndices[3]

}
}

fractionAnalysis$jitterp9$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp9$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitterp9$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=.9, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp9$RFscore[i,j], "\n")
fractionAnalysis$jitterp9$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitterp9$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitterp9$COR[i,j]<- rfOfIndices[3]

}
}

fractionAnalysis$jitter1$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitter1$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitter1$COR<-matrix(nrow=10, ncol=10, data=NA)
for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt= 1, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
#cat(rfOfIndices[1], rfOfIndices[2], rfOfIndices[3], "array contains", fractionAnalysis$jitterp1$RFscore[i,j], "\n")
fractionAnalysis$jitter1$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitter1$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitter1$COR[i,j]<- rfOfIndices[3]

}




fractionAnalysis$jitter10$RFscore<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitter10$MAXMCC<-matrix(nrow=10, ncol=10, data=NA)
fractionAnalysis$jitter10$COR<-matrix(nrow=10, ncol=10, data=NA)

for(i in 1:10){
for(j in 1:10){
x<-generateCovaryingGroups(dim(protein.groups[,experiment.ratio.column.indices])[1], dim(protein.groups[, experiment.ratio.column.indices])[2], jitter.amt=10, fraction.of.variables=i/10)
rfOfIndices<- computeRFofIndices(dataset=x$DATA, indexList=x$INDEX.LIST)
fractionAnalysis$jitter10$RFscore[i,j]<- rfOfIndices[1]
fractionAnalysis$jitter10$MAXMCC[i,j]<- rfOfIndices[2]
fractionAnalysis$jitter10$COR[i,j]<- rfOfIndices[3]
}
}


binnumber<- function(x){

if(x<(-.5)){
o<- 1
}else{
if(x>=-.5&&x< 0){
o<-2
}else{
if (x>=0&&x<.5){
o<-3
}else{
if (x>=.5&&x<1){
o<-4
}else{
if (x>=1&&x<1.5){
o<-5
}else{
if (x>=1.5&&x<2){
o<-6
}else{
if (x>=2&&x<2.5){
o<-7
}else{
if (x>2.5){
o<-8
}}}}}}}}
return(o)
}



